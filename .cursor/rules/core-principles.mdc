---
description: 
globs: 
alwaysApply: true
---
# Core Development Principles

## AI Behavior Guidelines

- **Limit Scope**: Keep changes focused and minimal, avoid large multi-file refactors unless explicitly requested
- **Task Management**: For complex tasks, create a temporary to-do list and follow it through systematically, removing it after completion
- **Test-Driven**: When implementing features or fixes, generate corresponding tests and ensure they pass before proceeding
- **Explain Reasoning**: Always explain your reasoning before making code changes
- **Breaking Changes**: Ask for confirmation before making breaking changes that could affect existing functionality
- **Pattern Recognition**: Suggest better patterns when you identify code repetition or anti-patterns
- **Offer Alternatives**: If unsure about an approach, provide 2-3 alternative solutions with trade-offs
- **Document Logic**: Use comments to explain non-obvious business logic and complex implementations

## Component Best Practices

- **Composables**: Create custom composables for any logic that's not pure UI presentation
- **Function Components**: Prefer Composition API over Options API
- **Clean Templates**: Keep templates clean - extract complex logic to computed properties or methods
- **Key Props**: Always use proper key attributes in v-for loops
- **State Handling**: Handle loading, error, and empty states explicitly in components
- **Component Size**: Keep components small and focused on a single responsibility

## TypeScript Standards

- **Strict Typing**: Use TypeScript everywhere with strict mode enabled, avoid `any` types
- **Type Definitions**: Define types in [src/types.ts](mdc:src/types.ts) or co-located type files
- **Interface Design**: Use interfaces for object shapes, types for unions and primitives
- **Generic Types**: Leverage generics for reusable type definitions
- **Auto-imports**: Take advantage of auto-import system configured in [vite.config.ts](mdc:vite.config.ts)

## Code Quality Standards

- **Variable Declaration**: Prefer `const` over `let`, use destructuring over dot notation
- **Naming**: Use meaningful variable names (avoid `i`, `j` unless in obvious loops)
- **Function Purity**: Write pure functions when possible, clearly separate side effects
- **Error Handling**: Implement proper error boundaries and error handling patterns
- **Performance**: Consider performance implications, use Vue's built-in optimizations

